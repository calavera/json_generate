package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGenerateWithFile(t *testing.T) {
	temp, err := ioutil.TempDir("", "json-")
	if !assert.NoError(t, err) {
		return
	}
	defer os.RemoveAll(temp)

	cwd, err := os.Getwd()
	if !assert.NoError(t, err) {
		return
	}

	out := path.Join(temp, "simple_json.go")
	root := path.Join(cwd, "examples")
	simple := path.Join(root, "simple.go")

	w := newWalker([]string{}, nil, nil)
	w.generate(out, root, simple)

	assertGeneratedOutput(t, out)
}

func TestGenerateStructsWithFile(t *testing.T) {
	temp, err := ioutil.TempDir("", "json-")
	if !assert.NoError(t, err) {
		return
	}
	defer os.RemoveAll(temp)

	cwd, err := os.Getwd()
	if !assert.NoError(t, err) {
		return
	}

	out := path.Join(temp, "simple_json.go")
	root := path.Join(cwd, "examples")
	simple := path.Join(root, "simple.go")

	generateStructs("", "", "", out, simple)

	assertGeneratedOutput(t, out)
}

func TestGenerateStructsWithDir(t *testing.T) {
	temp, err := ioutil.TempDir("", "json-")
	if !assert.NoError(t, err) {
		return
	}
	defer os.RemoveAll(temp)

	cwd, err := os.Getwd()
	if !assert.NoError(t, err) {
		return
	}

	out := path.Join(temp, "simple_json.go")
	root := path.Join(cwd, "examples")

	generateStructs("", "", "", out, root)

	assertGeneratedOutput(t, out)
}

func TestGenerateStructsWithExamples(t *testing.T) {
	temp, err := ioutil.TempDir("", "json-")
	if !assert.NoError(t, err) {
		return
	}
	defer os.RemoveAll(temp)

	cwd, err := os.Getwd()
	if !assert.NoError(t, err) {
		return
	}

	out := path.Join(temp, "simple_json.go")
	root := path.Join(cwd, "examples")

	generateStructs("User", "", "", out, root)

	assertGeneratedOutput(t, out)
}

func TestGenerateStructsWithoutRoot(t *testing.T) {
	temp, err := ioutil.TempDir("", "json-")
	if !assert.NoError(t, err) {
		return
	}
	defer os.RemoveAll(temp)

	cwd, err := os.Getwd()
	if !assert.NoError(t, err) {
		return
	}
	root := path.Join(cwd, "examples")
	err = os.Chdir(root)
	if !assert.NoError(t, err) {
		return
	}
	defer os.Chdir(cwd)

	out := path.Join(temp, "simple_json.go")

	generateStructs("User", "", "", out)

	assertGeneratedOutput(t, out)
}

func assertGeneratedOutput(t *testing.T, out string) {
	_, err := os.Stat(out)
	if !assert.NoError(t, err) {
		return
	}

	content, err := ioutil.ReadFile(out)
	if !assert.NoError(t, err) {
		return
	}

	fields := "Name string `json:\"name,omitempty\"`"
	expected := fmt.Sprintf(`// generated by json_generate; DO NOT EDIT
package examples

type User struct {
	%s
}`, fields)

	assert.Equal(t, string(content), expected)
}
